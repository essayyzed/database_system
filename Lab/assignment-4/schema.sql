--------------------------------------------------------------------------------------
-- NAME	       : OT (ORACLE TUTORIAL) SAMPLE DATABASE
-- LINK	       : HTTP://WWW.ORACLETUTORIAL.COM/ORACLE-SAMPLE-DATABASE/
-- VERSION     : 1.0
-- LAST UPDATED: JULY-28-2017
-- COPYRIGHT   : COPYRIGHT ï¿½ 2017 BY WWW.ORACLETUTORIAL.COM. ALL RIGHTS RESERVED.
-- NOTICE      : USE THIS SAMPLE DATABASE FOR THE EDUCATIONAL PURPOSE ONLY.
--               CREDIT THE SITE ORACLETUTORIAL.COM EXPLITLY IN YOUR MATERIALS THAT
--               USE THIS SAMPLE DATABASE.
--------------------------------------------------------------------------------------


---------------------------------------------------------------------------
-- EXECUTE THE FOLLOWING STATEMENTS TO CREATE TABLES
---------------------------------------------------------------------------
-- REGIONS
CREATE TABLE REGIONS
  (
    REGION_ID INTEGER PRIMARY KEY NOT NULL,
    REGION_NAME VARCHAR( 50 ) NOT NULL
  );
-- COUNTRIES TABLE
CREATE TABLE COUNTRIES
  (
    COUNTRY_ID   CHAR( 2 ) PRIMARY KEY  NOT NULL,
    COUNTRY_NAME VARCHAR( 40 ) NOT NULL,
    REGION_ID    INTEGER                 , -- FK
    CONSTRAINT FK_COUNTRIES_REGIONS FOREIGN KEY( REGION_ID )
      REFERENCES REGIONS( REGION_ID ) 
      ON DELETE CASCADE
  );

-- LOCATION
CREATE TABLE LOCATIONS
  (
    LOCATION_ID INTEGER NOT  NULL 
                PRIMARY KEY       ,
    ADDRESS     VARCHAR( 255 ) NOT NULL,
    POSTAL_CODE VARCHAR( 20 )          ,
    CITY        VARCHAR( 50 )          ,
    STATE       VARCHAR( 50 )          ,
    COUNTRY_ID  CHAR( 2 )               , -- FK
    CONSTRAINT FK_LOCATIONS_COUNTRIES 
      FOREIGN KEY( COUNTRY_ID )
      REFERENCES COUNTRIES( COUNTRY_ID ) 
      ON DELETE CASCADE
  );
-- WAREHOUSES
CREATE TABLE WAREHOUSES
  (
    WAREHOUSE_ID INTEGER 
                 NOT NULL
                 PRIMARY KEY,
    WAREHOUSE_NAME VARCHAR( 255 ) ,
    LOCATION_ID    INTEGER, -- FK
    CONSTRAINT FK_WAREHOUSES_LOCATIONS 
      FOREIGN KEY( LOCATION_ID )
      REFERENCES LOCATIONS( LOCATION_ID ) 
      ON DELETE CASCADE
  );
-- EMPLOYEES
CREATE TABLE EMPLOYEES
  (
    EMPLOYEE_ID INTEGER 
                NOT NULL
                PRIMARY KEY,
    FIRST_NAME VARCHAR( 255 ) NOT NULL,
    LAST_NAME  VARCHAR( 255 ) NOT NULL,
    EMAIL      VARCHAR( 255 ) NOT NULL,
    PHONE      VARCHAR( 50 ) NOT NULL ,
    HIRE_DATE  DATE NOT NULL          ,
    MANAGER_ID INTEGER        , -- FK
    JOB_TITLE  VARCHAR( 255 ) NOT NULL,
    CONSTRAINT FK_EMPLOYEES_MANAGER 
        FOREIGN KEY( MANAGER_ID )
        REFERENCES EMPLOYEES( EMPLOYEE_ID )
        ON DELETE CASCADE
  );
-- PRODUCT CATEGORY
CREATE TABLE PRODUCT_CATEGORIES
  (
    CATEGORY_ID INTEGER 
                NOT NULL 
                PRIMARY KEY,
    CATEGORY_NAME VARCHAR( 255 ) NOT NULL
  );

-- PRODUCTS TABLE
CREATE TABLE PRODUCTS
  (
    PRODUCT_ID INTEGER 
               NOT NULL
               PRIMARY KEY,
    PRODUCT_NAME  VARCHAR( 255 ) NOT NULL,
    DESCRIPTION   VARCHAR( 2000 )        ,
    STANDARD_COST INTEGER         ,
    LIST_PRICE    INTEGER          ,
    CATEGORY_ID   INTEGER NOT NULL         ,
    CONSTRAINT FK_PRODUCTS_CATEGORIES 
      FOREIGN KEY( CATEGORY_ID )
      REFERENCES PRODUCT_CATEGORIES( CATEGORY_ID ) 
      ON DELETE CASCADE
  );
-- CUSTOMERS
CREATE TABLE CUSTOMERS
  (
    CUSTOMER_ID INTEGER 
                NOT NULL
                PRIMARY KEY,
    NAME         VARCHAR( 255 ) NOT NULL,
    ADDRESS      VARCHAR( 255 )         ,
    WEBSITE      VARCHAR( 255 )         ,
    CREDIT_LIMIT INTEGER
  );
-- CONTACTS
CREATE TABLE CONTACTS
  (
    CONTACT_ID INTEGER 
                NOT NULL 
               PRIMARY KEY,
    FIRST_NAME  VARCHAR( 255 ) NOT NULL,
    LAST_NAME   VARCHAR( 255 ) NOT NULL,
    EMAIL       VARCHAR( 255 ) NOT NULL,
    PHONE       VARCHAR( 20 )          ,
    CUSTOMER_ID INTEGER                  ,
    CONSTRAINT FK_CONTACTS_CUSTOMERS 
      FOREIGN KEY( CUSTOMER_ID )
      REFERENCES CUSTOMERS( CUSTOMER_ID ) 
      ON DELETE CASCADE
  );
-- ORDERS TABLE
CREATE TABLE ORDERS
  (
    ORDER_ID INTEGER 
              NOT NULL
             PRIMARY KEY,
    CUSTOMER_ID INTEGER NOT NULL, -- FK
    STATUS      VARCHAR( 20 ) NOT NULL ,
    SALESMAN_ID INTEGER   NOT NULL     , -- FK
    ORDER_DATE  DATE NOT NULL          ,
    CONSTRAINT FK_ORDERS_CUSTOMERS 
      FOREIGN KEY( CUSTOMER_ID )
      REFERENCES CUSTOMERS( CUSTOMER_ID )
      ON DELETE CASCADE,s
    CONSTRAINT FK_ORDERS_EMPLOYEES 
      FOREIGN KEY( SALESMAN_ID )
      REFERENCES EMPLOYEES( EMPLOYEE_ID ) 
      ON DELETE CASCADE
  );
-- ORDER ITEMS
CREATE TABLE ORDER_ITEMS
  (
    ORDER_ID   INTEGER                               , -- FK
    ITEM_ID    INTEGER                                ,
    PRODUCT_ID INTEGER NOT NULL                       , -- FK
    QUANTITY   INTEGER NOT NULL                        ,
    UNIT_PRICE INTEGER NOT NULL                        ,
    CONSTRAINT PK_ORDER_ITEMS 
      PRIMARY KEY( ORDER_ID, ITEM_ID ),
    CONSTRAINT FK_ORDER_ITEMS_PRODUCTS 
      FOREIGN KEY( PRODUCT_ID )
      REFERENCES PRODUCTS( PRODUCT_ID ) 
      ON DELETE CASCADE,
    CONSTRAINT FK_ORDER_ITEMS_ORDERS 
      FOREIGN KEY( ORDER_ID )
      REFERENCES ORDERS( ORDER_ID ) 
      ON DELETE CASCADE
  );
-- INVENTORIES
CREATE TABLE INVENTORIES
  (
    PRODUCT_ID   INTEGER        , -- FK
    WAREHOUSE_ID INTEGER        , -- FK
    QUANTITY     INTEGER NOT NULL,
    CONSTRAINT PK_INVENTORIES 
      PRIMARY KEY( PRODUCT_ID, WAREHOUSE_ID ),
    CONSTRAINT FK_INVENTORIES_PRODUCTS 
      FOREIGN KEY( PRODUCT_ID )
      REFERENCES PRODUCTS( PRODUCT_ID ) 
      ON DELETE CASCADE,
    CONSTRAINT FK_INVENTORIES_WAREHOUSES 
      FOREIGN KEY( WAREHOUSE_ID )
      REFERENCES WAREHOUSES( WAREHOUSE_ID ) 
      ON DELETE CASCADE
  );